// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model/message.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorType int32

const (
	ErrorType_ERR_OK       ErrorType = 0
	ErrorType_ERR_Request  ErrorType = 1
	ErrorType_ERR_Internal ErrorType = 2
	ErrorType_ERR_Failed   ErrorType = 3
)

var ErrorType_name = map[int32]string{
	0: "ERR_OK",
	1: "ERR_Request",
	2: "ERR_Internal",
	3: "ERR_Failed",
}
var ErrorType_value = map[string]int32{
	"ERR_OK":       0,
	"ERR_Request":  1,
	"ERR_Internal": 2,
	"ERR_Failed":   3,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_1ef23fe55292bf10, []int{0}
}

type MessageType int32

const (
	// option allow_alias = true;
	MessageType_Auction         MessageType = 0
	MessageType_Group           MessageType = 2
	MessageType_Shout           MessageType = 3
	MessageType_Auction4        MessageType = 4
	MessageType_OOC             MessageType = 5
	MessageType_Broadcast       MessageType = 6
	MessageType_Tell            MessageType = 7
	MessageType_Say             MessageType = 8
	MessageType_Tell14          MessageType = 14
	MessageType_Raid            MessageType = 15
	MessageType_Guild           MessageType = 17
	MessageType_GMSayWeird18    MessageType = 18
	MessageType_LocalEmote20    MessageType = 20
	MessageType_Fellowship      MessageType = 21
	MessageType_Emote           MessageType = 22
	MessageType_Say256          MessageType = 256
	MessageType_Tell257         MessageType = 257
	MessageType_Group258        MessageType = 258
	MessageType_Shout259        MessageType = 259
	MessageType_Auction260      MessageType = 260
	MessageType_OOC261          MessageType = 261
	MessageType_Broadcast262    MessageType = 262
	MessageType_Tell263         MessageType = 263
	MessageType_Say264          MessageType = 264
	MessageType_YouHitOther     MessageType = 265
	MessageType_OtherHitsYou    MessageType = 266
	MessageType_YouMissOther    MessageType = 267
	MessageType_OtherMissesYou  MessageType = 268
	MessageType_Skills          MessageType = 270
	MessageType_Disciplines     MessageType = 271
	MessageType_Guild273        MessageType = 273
	MessageType_GMSay           MessageType = 274
	MessageType_MerchantOffer   MessageType = 275
	MessageType_MerchantBuySell MessageType = 276
	MessageType_Fellowship277   MessageType = 277
	MessageType_Emote278        MessageType = 278
	MessageType_OtherHits       MessageType = 279
	MessageType_OtherMisses     MessageType = 280
	MessageType_Who             MessageType = 281
	MessageType_YellForHelp     MessageType = 282
	MessageType_NonMelee        MessageType = 283
	MessageType_WornOff         MessageType = 284
	MessageType_MoneySplit      MessageType = 285
	MessageType_LootMessages    MessageType = 286
	MessageType_DiceRoll        MessageType = 287
	MessageType_OtherSpells     MessageType = 288
	MessageType_SpellFailure    MessageType = 289
	MessageType_Chat            MessageType = 290
	MessageType_Channel1        MessageType = 291
	MessageType_Channel2        MessageType = 292
	MessageType_Channel3        MessageType = 293
	MessageType_Channel4        MessageType = 294
	MessageType_Channel5        MessageType = 295
	MessageType_Channel6        MessageType = 296
	MessageType_Channel7        MessageType = 297
	MessageType_Channel8        MessageType = 298
	MessageType_Channel9        MessageType = 299
	MessageType_Channel10       MessageType = 300
	MessageType_CritMelee       MessageType = 301
	MessageType_SpellCrits      MessageType = 302
	MessageType_TooFarAway      MessageType = 303
	MessageType_NPCRampage      MessageType = 304
	MessageType_NPCFlurry       MessageType = 305
	MessageType_NPCEnrage       MessageType = 306
	MessageType_SayEcho         MessageType = 307
	MessageType_TellEcho        MessageType = 308
	MessageType_GroupEcho       MessageType = 309
	MessageType_GuildEcho       MessageType = 310
	MessageType_OOCEcho         MessageType = 311
	MessageType_Auction2        MessageType = 312
	MessageType_ShoutECho       MessageType = 313
	MessageType_EmoteEcho       MessageType = 314
	MessageType_Chat1Echo       MessageType = 315
	MessageType_Chat2Echo       MessageType = 316
	MessageType_Chat3Echo       MessageType = 317
	MessageType_Chat4Echo       MessageType = 318
	MessageType_Chat5Echo       MessageType = 319
	MessageType_Chat6Echo       MessageType = 320
	MessageType_Chat7Echo       MessageType = 321
	MessageType_Chat8Echo       MessageType = 322
	MessageType_Chat9Echo       MessageType = 323
	MessageType_Chat10Echo      MessageType = 324
	MessageType_DoTDamage       MessageType = 325
	MessageType_ItemLink        MessageType = 326
	MessageType_RaidSay         MessageType = 327
	MessageType_MyPet           MessageType = 328
	MessageType_DS              MessageType = 329
	MessageType_Leadership      MessageType = 330
	MessageType_PetFlurry       MessageType = 331
	MessageType_PetCrit         MessageType = 332
	MessageType_FocusEffect     MessageType = 333
	MessageType_Experience      MessageType = 334
	MessageType_System          MessageType = 335
	MessageType_PetSpell        MessageType = 336
	MessageType_PetResponse     MessageType = 337
	MessageType_ItemSpeech      MessageType = 338
	MessageType_StrikeThrough   MessageType = 339
	MessageType_Stun            MessageType = 340
)

var MessageType_name = map[int32]string{
	0:   "Auction",
	2:   "Group",
	3:   "Shout",
	4:   "Auction4",
	5:   "OOC",
	6:   "Broadcast",
	7:   "Tell",
	8:   "Say",
	14:  "Tell14",
	15:  "Raid",
	17:  "Guild",
	18:  "GMSayWeird18",
	20:  "LocalEmote20",
	21:  "Fellowship",
	22:  "Emote",
	256: "Say256",
	257: "Tell257",
	258: "Group258",
	259: "Shout259",
	260: "Auction260",
	261: "OOC261",
	262: "Broadcast262",
	263: "Tell263",
	264: "Say264",
	265: "YouHitOther",
	266: "OtherHitsYou",
	267: "YouMissOther",
	268: "OtherMissesYou",
	270: "Skills",
	271: "Disciplines",
	273: "Guild273",
	274: "GMSay",
	275: "MerchantOffer",
	276: "MerchantBuySell",
	277: "Fellowship277",
	278: "Emote278",
	279: "OtherHits",
	280: "OtherMisses",
	281: "Who",
	282: "YellForHelp",
	283: "NonMelee",
	284: "WornOff",
	285: "MoneySplit",
	286: "LootMessages",
	287: "DiceRoll",
	288: "OtherSpells",
	289: "SpellFailure",
	290: "Chat",
	291: "Channel1",
	292: "Channel2",
	293: "Channel3",
	294: "Channel4",
	295: "Channel5",
	296: "Channel6",
	297: "Channel7",
	298: "Channel8",
	299: "Channel9",
	300: "Channel10",
	301: "CritMelee",
	302: "SpellCrits",
	303: "TooFarAway",
	304: "NPCRampage",
	305: "NPCFlurry",
	306: "NPCEnrage",
	307: "SayEcho",
	308: "TellEcho",
	309: "GroupEcho",
	310: "GuildEcho",
	311: "OOCEcho",
	312: "Auction2",
	313: "ShoutECho",
	314: "EmoteEcho",
	315: "Chat1Echo",
	316: "Chat2Echo",
	317: "Chat3Echo",
	318: "Chat4Echo",
	319: "Chat5Echo",
	320: "Chat6Echo",
	321: "Chat7Echo",
	322: "Chat8Echo",
	323: "Chat9Echo",
	324: "Chat10Echo",
	325: "DoTDamage",
	326: "ItemLink",
	327: "RaidSay",
	328: "MyPet",
	329: "DS",
	330: "Leadership",
	331: "PetFlurry",
	332: "PetCrit",
	333: "FocusEffect",
	334: "Experience",
	335: "System",
	336: "PetSpell",
	337: "PetResponse",
	338: "ItemSpeech",
	339: "StrikeThrough",
	340: "Stun",
}
var MessageType_value = map[string]int32{
	"Auction":         0,
	"Group":           2,
	"Shout":           3,
	"Auction4":        4,
	"OOC":             5,
	"Broadcast":       6,
	"Tell":            7,
	"Say":             8,
	"Tell14":          14,
	"Raid":            15,
	"Guild":           17,
	"GMSayWeird18":    18,
	"LocalEmote20":    20,
	"Fellowship":      21,
	"Emote":           22,
	"Say256":          256,
	"Tell257":         257,
	"Group258":        258,
	"Shout259":        259,
	"Auction260":      260,
	"OOC261":          261,
	"Broadcast262":    262,
	"Tell263":         263,
	"Say264":          264,
	"YouHitOther":     265,
	"OtherHitsYou":    266,
	"YouMissOther":    267,
	"OtherMissesYou":  268,
	"Skills":          270,
	"Disciplines":     271,
	"Guild273":        273,
	"GMSay":           274,
	"MerchantOffer":   275,
	"MerchantBuySell": 276,
	"Fellowship277":   277,
	"Emote278":        278,
	"OtherHits":       279,
	"OtherMisses":     280,
	"Who":             281,
	"YellForHelp":     282,
	"NonMelee":        283,
	"WornOff":         284,
	"MoneySplit":      285,
	"LootMessages":    286,
	"DiceRoll":        287,
	"OtherSpells":     288,
	"SpellFailure":    289,
	"Chat":            290,
	"Channel1":        291,
	"Channel2":        292,
	"Channel3":        293,
	"Channel4":        294,
	"Channel5":        295,
	"Channel6":        296,
	"Channel7":        297,
	"Channel8":        298,
	"Channel9":        299,
	"Channel10":       300,
	"CritMelee":       301,
	"SpellCrits":      302,
	"TooFarAway":      303,
	"NPCRampage":      304,
	"NPCFlurry":       305,
	"NPCEnrage":       306,
	"SayEcho":         307,
	"TellEcho":        308,
	"GroupEcho":       309,
	"GuildEcho":       310,
	"OOCEcho":         311,
	"Auction2":        312,
	"ShoutECho":       313,
	"EmoteEcho":       314,
	"Chat1Echo":       315,
	"Chat2Echo":       316,
	"Chat3Echo":       317,
	"Chat4Echo":       318,
	"Chat5Echo":       319,
	"Chat6Echo":       320,
	"Chat7Echo":       321,
	"Chat8Echo":       322,
	"Chat9Echo":       323,
	"Chat10Echo":      324,
	"DoTDamage":       325,
	"ItemLink":        326,
	"RaidSay":         327,
	"MyPet":           328,
	"DS":              329,
	"Leadership":      330,
	"PetFlurry":       331,
	"PetCrit":         332,
	"FocusEffect":     333,
	"Experience":      334,
	"System":          335,
	"PetSpell":        336,
	"PetResponse":     337,
	"ItemSpeech":      338,
	"StrikeThrough":   339,
	"Stun":            340,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_1ef23fe55292bf10, []int{1}
}

// EntityType will attempt to identify an entity to it's upper-most type by default
type EntityType int32

const (
	EntityType_NPC       EntityType = 0
	EntityType_Client    EntityType = 1
	EntityType_Mob       EntityType = 2
	EntityType_Mercenary EntityType = 3
	EntityType_Corpse    EntityType = 4
	EntityType_Door      EntityType = 5
	EntityType_Object    EntityType = 6
	EntityType_Trap      EntityType = 7
	EntityType_Beacon    EntityType = 9
	EntityType_Encounter EntityType = 10
)

var EntityType_name = map[int32]string{
	0:  "NPC",
	1:  "Client",
	2:  "Mob",
	3:  "Mercenary",
	4:  "Corpse",
	5:  "Door",
	6:  "Object",
	7:  "Trap",
	9:  "Beacon",
	10: "Encounter",
}
var EntityType_value = map[string]int32{
	"NPC":       0,
	"Client":    1,
	"Mob":       2,
	"Mercenary": 3,
	"Corpse":    4,
	"Door":      5,
	"Object":    6,
	"Trap":      7,
	"Beacon":    9,
	"Encounter": 10,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_message_1ef23fe55292bf10, []int{2}
}

type ChannelMessage struct {
	Number               MessageType `protobuf:"varint,1,opt,name=number,proto3,enum=model.MessageType" json:"number,omitempty"`
	Language             int32       `protobuf:"varint,2,opt,name=language,proto3" json:"language,omitempty"`
	From                 string      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   string      `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Message              string      `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Guilddbid            int32       `protobuf:"varint,6,opt,name=guilddbid,proto3" json:"guilddbid,omitempty"`
	Deliverto            string      `protobuf:"bytes,7,opt,name=deliverto,proto3" json:"deliverto,omitempty"`
	Type                 int32       `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Minstatus            int32       `protobuf:"varint,9,opt,name=minstatus,proto3" json:"minstatus,omitempty"`
	Fromadmin            int32       `protobuf:"varint,10,opt,name=fromadmin,proto3" json:"fromadmin,omitempty"`
	Noreply              bool        `protobuf:"varint,11,opt,name=noreply,proto3" json:"noreply,omitempty"`
	IsEmote              bool        `protobuf:"varint,12,opt,name=is_emote,json=isEmote,proto3" json:"is_emote,omitempty"`
	Queued               int32       `protobuf:"varint,13,opt,name=queued,proto3" json:"queued,omitempty"`
	FromEntityId         int32       `protobuf:"varint,16,opt,name=from_entity_id,json=fromEntityId,proto3" json:"from_entity_id,omitempty"`
	FromEntityType       EntityType  `protobuf:"varint,17,opt,name=from_entity_type,json=fromEntityType,proto3,enum=model.EntityType" json:"from_entity_type,omitempty"`
	Distance             float32     `protobuf:"fixed32,18,opt,name=distance,proto3" json:"distance,omitempty"`
	SkipSender           bool        `protobuf:"varint,19,opt,name=skip_sender,json=skipSender,proto3" json:"skip_sender,omitempty"`
	ResponseMessage      string      `protobuf:"bytes,20,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	ResponseValue        int32       `protobuf:"varint,21,opt,name=response_value,json=responseValue,proto3" json:"response_value,omitempty"`
	ResponseError        ErrorType   `protobuf:"varint,22,opt,name=response_error,json=responseError,proto3,enum=model.ErrorType" json:"response_error,omitempty"`
	ResponseType         string      `protobuf:"bytes,23,opt,name=response_type,json=responseType,proto3" json:"response_type,omitempty"`
	ResponsePayload      []byte      `protobuf:"bytes,24,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	Creator              string      `protobuf:"bytes,25,opt,name=creator,proto3" json:"creator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChannelMessage) Reset()         { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()    {}
func (*ChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_1ef23fe55292bf10, []int{0}
}
func (m *ChannelMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessage.Unmarshal(m, b)
}
func (m *ChannelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessage.Marshal(b, m, deterministic)
}
func (dst *ChannelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessage.Merge(dst, src)
}
func (m *ChannelMessage) XXX_Size() int {
	return xxx_messageInfo_ChannelMessage.Size(m)
}
func (m *ChannelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessage proto.InternalMessageInfo

func (m *ChannelMessage) GetNumber() MessageType {
	if m != nil {
		return m.Number
	}
	return MessageType_Auction
}

func (m *ChannelMessage) GetLanguage() int32 {
	if m != nil {
		return m.Language
	}
	return 0
}

func (m *ChannelMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChannelMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChannelMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChannelMessage) GetGuilddbid() int32 {
	if m != nil {
		return m.Guilddbid
	}
	return 0
}

func (m *ChannelMessage) GetDeliverto() string {
	if m != nil {
		return m.Deliverto
	}
	return ""
}

func (m *ChannelMessage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChannelMessage) GetMinstatus() int32 {
	if m != nil {
		return m.Minstatus
	}
	return 0
}

func (m *ChannelMessage) GetFromadmin() int32 {
	if m != nil {
		return m.Fromadmin
	}
	return 0
}

func (m *ChannelMessage) GetNoreply() bool {
	if m != nil {
		return m.Noreply
	}
	return false
}

func (m *ChannelMessage) GetIsEmote() bool {
	if m != nil {
		return m.IsEmote
	}
	return false
}

func (m *ChannelMessage) GetQueued() int32 {
	if m != nil {
		return m.Queued
	}
	return 0
}

func (m *ChannelMessage) GetFromEntityId() int32 {
	if m != nil {
		return m.FromEntityId
	}
	return 0
}

func (m *ChannelMessage) GetFromEntityType() EntityType {
	if m != nil {
		return m.FromEntityType
	}
	return EntityType_NPC
}

func (m *ChannelMessage) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *ChannelMessage) GetSkipSender() bool {
	if m != nil {
		return m.SkipSender
	}
	return false
}

func (m *ChannelMessage) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *ChannelMessage) GetResponseValue() int32 {
	if m != nil {
		return m.ResponseValue
	}
	return 0
}

func (m *ChannelMessage) GetResponseError() ErrorType {
	if m != nil {
		return m.ResponseError
	}
	return ErrorType_ERR_OK
}

func (m *ChannelMessage) GetResponseType() string {
	if m != nil {
		return m.ResponseType
	}
	return ""
}

func (m *ChannelMessage) GetResponsePayload() []byte {
	if m != nil {
		return m.ResponsePayload
	}
	return nil
}

func (m *ChannelMessage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type CommandMessage struct {
	Author               string    `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Command              string    `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Params               []string  `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	ResponseMessage      string    `protobuf:"bytes,4,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	ResponseValue        int32     `protobuf:"varint,5,opt,name=response_value,json=responseValue,proto3" json:"response_value,omitempty"`
	ResponseError        ErrorType `protobuf:"varint,6,opt,name=response_error,json=responseError,proto3,enum=model.ErrorType" json:"response_error,omitempty"`
	ResponseType         string    `protobuf:"bytes,7,opt,name=response_type,json=responseType,proto3" json:"response_type,omitempty"`
	ResponsePayload      []byte    `protobuf:"bytes,8,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommandMessage) Reset()         { *m = CommandMessage{} }
func (m *CommandMessage) String() string { return proto.CompactTextString(m) }
func (*CommandMessage) ProtoMessage()    {}
func (*CommandMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_1ef23fe55292bf10, []int{1}
}
func (m *CommandMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandMessage.Unmarshal(m, b)
}
func (m *CommandMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandMessage.Marshal(b, m, deterministic)
}
func (dst *CommandMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandMessage.Merge(dst, src)
}
func (m *CommandMessage) XXX_Size() int {
	return xxx_messageInfo_CommandMessage.Size(m)
}
func (m *CommandMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommandMessage proto.InternalMessageInfo

func (m *CommandMessage) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *CommandMessage) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *CommandMessage) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *CommandMessage) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CommandMessage) GetResponseValue() int32 {
	if m != nil {
		return m.ResponseValue
	}
	return 0
}

func (m *CommandMessage) GetResponseError() ErrorType {
	if m != nil {
		return m.ResponseError
	}
	return ErrorType_ERR_OK
}

func (m *CommandMessage) GetResponseType() string {
	if m != nil {
		return m.ResponseType
	}
	return ""
}

func (m *CommandMessage) GetResponsePayload() []byte {
	if m != nil {
		return m.ResponsePayload
	}
	return nil
}

func init() {
	proto.RegisterType((*ChannelMessage)(nil), "model.ChannelMessage")
	proto.RegisterType((*CommandMessage)(nil), "model.CommandMessage")
	proto.RegisterEnum("model.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterEnum("model.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("model.EntityType", EntityType_name, EntityType_value)
}

func init() { proto.RegisterFile("model/message.proto", fileDescriptor_message_1ef23fe55292bf10) }

var fileDescriptor_message_1ef23fe55292bf10 = []byte{
	// 1491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x49, 0x6f, 0x1b, 0xcb,
	0x11, 0xc7, 0xcd, 0xa1, 0xb8, 0x35, 0x29, 0xaa, 0xd4, 0xb6, 0x95, 0x71, 0x10, 0x20, 0x82, 0x93,
	0x00, 0x8a, 0x0e, 0x8e, 0x44, 0x49, 0xa4, 0x8c, 0x9c, 0x6c, 0x8a, 0xb2, 0x9d, 0x88, 0x22, 0x41,
	0x0a, 0x31, 0x7c, 0x12, 0x5a, 0x9c, 0x92, 0x38, 0xd1, 0x70, 0x7a, 0xdc, 0xd3, 0x63, 0x67, 0x6e,
	0x4e, 0xe2, 0xec, 0x41, 0x82, 0xec, 0xfb, 0xbe, 0xef, 0xab, 0xb3, 0xe7, 0xed, 0xfb, 0xbe, 0x7d,
	0x87, 0xf7, 0x35, 0x1e, 0xba, 0x86, 0x1c, 0xf1, 0xe0, 0x83, 0xf1, 0x6e, 0xf3, 0xfb, 0x77, 0x55,
	0x75, 0x55, 0x75, 0x75, 0x93, 0xec, 0xf4, 0x48, 0x3a, 0xe8, 0x7d, 0x60, 0x84, 0x61, 0x28, 0x8e,
	0xf0, 0x42, 0xa0, 0xa4, 0x96, 0x3c, 0x47, 0xe2, 0xf9, 0xbb, 0x79, 0x56, 0x6d, 0x0e, 0x85, 0xef,
	0xa3, 0xd7, 0x4e, 0xd6, 0xf9, 0x32, 0xcb, 0xfb, 0xd1, 0xe8, 0x00, 0x95, 0x9d, 0x59, 0xcc, 0x2c,
	0x55, 0x6b, 0xfc, 0x02, 0x99, 0x5e, 0x18, 0xaf, 0xef, 0xc5, 0x01, 0xf6, 0xc6, 0x16, 0xfc, 0x9d,
	0xac, 0xe8, 0x09, 0xff, 0x28, 0x12, 0x47, 0x68, 0x5b, 0x8b, 0x99, 0xa5, 0x5c, 0x2f, 0x65, 0xce,
	0xd9, 0xcc, 0xa1, 0x92, 0x23, 0x3b, 0xbb, 0x98, 0x59, 0x2a, 0xf5, 0xe8, 0x9b, 0x57, 0x99, 0xa5,
	0xa5, 0x3d, 0x43, 0x8a, 0xa5, 0x25, 0xb7, 0x59, 0x61, 0x9c, 0x96, 0x9d, 0x23, 0x71, 0x82, 0xfc,
	0x5d, 0xac, 0x74, 0x14, 0xb9, 0x9e, 0xe3, 0x1c, 0xb8, 0x8e, 0x9d, 0xa7, 0xd0, 0x27, 0x82, 0x59,
	0x75, 0xd0, 0x73, 0x6f, 0xa1, 0xd2, 0xd2, 0x2e, 0x90, 0xe7, 0x89, 0x60, 0x76, 0xd6, 0x71, 0x80,
	0x76, 0x91, 0xdc, 0xe8, 0xdb, 0x78, 0x8c, 0x5c, 0x3f, 0xd4, 0x42, 0x47, 0xa1, 0x5d, 0x4a, 0xe2,
	0xa5, 0x82, 0x59, 0x35, 0xf9, 0x09, 0x67, 0xe4, 0xfa, 0x36, 0x4b, 0x56, 0x53, 0xc1, 0x64, 0xe9,
	0x4b, 0x85, 0x81, 0x17, 0xdb, 0xe5, 0xc5, 0xcc, 0x52, 0xb1, 0x37, 0x41, 0x7e, 0x8e, 0x15, 0xdd,
	0x70, 0x1f, 0x47, 0x52, 0xa3, 0x5d, 0x49, 0x96, 0xdc, 0xb0, 0x65, 0x90, 0x2f, 0xb0, 0xfc, 0xcd,
	0x08, 0x23, 0x74, 0xec, 0x59, 0x8a, 0x37, 0x26, 0xfe, 0x5e, 0x56, 0x35, 0x91, 0xf7, 0xd1, 0xd7,
	0xae, 0x8e, 0xf7, 0x5d, 0xc7, 0x06, 0x5a, 0xaf, 0x18, 0xb5, 0x45, 0xe2, 0x35, 0x87, 0x7f, 0x90,
	0xc1, 0xb4, 0x15, 0x95, 0x33, 0x4f, 0xc7, 0x31, 0x3f, 0x3e, 0x8e, 0xc4, 0x94, 0x4e, 0xa3, 0x7a,
	0xe2, 0x6a, 0xd8, 0x9c, 0x8a, 0xe3, 0x86, 0x5a, 0xf8, 0x03, 0xb4, 0xf9, 0x62, 0x66, 0xc9, 0xea,
	0xa5, 0xcc, 0xdf, 0xcd, 0xca, 0xe1, 0xb1, 0x1b, 0xec, 0x87, 0xe8, 0x3b, 0xa8, 0xec, 0xd3, 0x94,
	0x34, 0x33, 0x52, 0x9f, 0x14, 0xfe, 0x7e, 0x06, 0x0a, 0xc3, 0x40, 0xfa, 0x21, 0xee, 0x4f, 0xce,
	0xe6, 0x0c, 0x75, 0x78, 0x6e, 0xa2, 0x4f, 0x26, 0xe5, 0x7d, 0xac, 0x9a, 0x9a, 0xde, 0x12, 0x5e,
	0x84, 0xf6, 0x59, 0x2a, 0x65, 0x76, 0xa2, 0x7e, 0xc4, 0x88, 0xbc, 0x31, 0x65, 0x86, 0x4a, 0x49,
	0x65, 0x2f, 0x50, 0x25, 0x30, 0xa9, 0xc4, 0x68, 0x54, 0x48, 0xea, 0x48, 0x12, 0x7f, 0x0f, 0x4b,
	0x85, 0xa4, 0x03, 0xef, 0xa0, 0x3c, 0x2a, 0x13, 0x91, 0x8a, 0x9d, 0xce, 0x37, 0x10, 0xb1, 0x27,
	0x85, 0x63, 0xdb, 0x8b, 0x99, 0xa5, 0xca, 0x49, 0xbe, 0xdd, 0x44, 0x36, 0xe7, 0x38, 0x50, 0x28,
	0xb4, 0x54, 0xf6, 0xb9, 0x64, 0xda, 0xc6, 0x78, 0xfe, 0x9e, 0xc5, 0xaa, 0x4d, 0x39, 0x1a, 0x09,
	0xdf, 0x99, 0x14, 0xb7, 0xc0, 0xf2, 0x22, 0xd2, 0x43, 0x99, 0x5c, 0x83, 0x52, 0x6f, 0x4c, 0x14,
	0x24, 0xb1, 0xa4, 0x89, 0x37, 0x41, 0x12, 0x34, 0x1e, 0x81, 0x50, 0x62, 0x14, 0xda, 0xd9, 0xc5,
	0xac, 0xf1, 0x48, 0xe8, 0xbe, 0x1d, 0x9d, 0x79, 0xd0, 0x8e, 0xe6, 0x1e, 0xac, 0xa3, 0xf9, 0xb7,
	0xd9, 0xd1, 0xc2, 0x03, 0x76, 0xb4, 0x78, 0xdf, 0x8e, 0x2e, 0x7f, 0x88, 0x95, 0xd2, 0xbd, 0x38,
	0x63, 0xf9, 0x56, 0xaf, 0xb7, 0xdf, 0xf9, 0x30, 0x9c, 0xe2, 0x73, 0xac, 0x6c, 0xbe, 0x7b, 0x78,
	0x33, 0xc2, 0x50, 0x43, 0x86, 0x03, 0xab, 0x18, 0xe1, 0x9a, 0xaf, 0x51, 0xf9, 0xc2, 0x03, 0x8b,
	0x57, 0x19, 0x33, 0xca, 0xb6, 0x70, 0x3d, 0x74, 0x20, 0xbb, 0xfc, 0x66, 0x99, 0x95, 0xa7, 0xde,
	0x18, 0x5e, 0x66, 0x85, 0x4b, 0xd1, 0x40, 0xbb, 0xd2, 0x87, 0x53, 0xbc, 0xc4, 0x72, 0x57, 0x94,
	0x8c, 0x02, 0xb0, 0xcc, 0x67, 0x7f, 0x28, 0x23, 0x0d, 0x59, 0x5e, 0x61, 0xc5, 0xb1, 0xc9, 0x3a,
	0xcc, 0xf0, 0x02, 0xcb, 0x76, 0x3a, 0x4d, 0xc8, 0xf1, 0x59, 0x56, 0xba, 0xac, 0xa4, 0x70, 0x06,
	0x22, 0xd4, 0x90, 0xe7, 0x45, 0x36, 0xb3, 0x87, 0x9e, 0x07, 0x05, 0x63, 0xd1, 0x17, 0x31, 0x14,
	0x4d, 0xaa, 0x46, 0x5a, 0x5d, 0x87, 0xaa, 0x59, 0xee, 0x09, 0xd7, 0x81, 0x39, 0xda, 0xc4, 0x3c,
	0x31, 0x30, 0x6f, 0xd2, 0xbd, 0xd2, 0xee, 0x8b, 0xf8, 0x3a, 0xba, 0xca, 0x59, 0xdd, 0x04, 0x6e,
	0x94, 0x1d, 0x39, 0x10, 0x1e, 0xdd, 0xee, 0xda, 0x0a, 0x9c, 0x31, 0x05, 0x6c, 0xa3, 0xe7, 0xc9,
	0xdb, 0xe1, 0xd0, 0x0d, 0xe0, 0xac, 0x71, 0xa7, 0x45, 0x58, 0xe0, 0x65, 0x96, 0xef, 0x8b, 0xb8,
	0xb6, 0x51, 0x87, 0x3b, 0x16, 0xaf, 0xb0, 0x82, 0xd9, 0xac, 0xb6, 0xd1, 0x80, 0x8f, 0x5b, 0x7c,
	0x96, 0x15, 0xa9, 0x92, 0xda, 0xc6, 0x26, 0x7c, 0x82, 0x90, 0xaa, 0xa9, 0x6d, 0x5c, 0x84, 0x4f,
	0x5a, 0x7c, 0x8e, 0xb1, 0x71, 0x45, 0xb5, 0xfa, 0x0a, 0xdc, 0xb5, 0x4c, 0xa4, 0x4e, 0xa7, 0x59,
	0xab, 0xaf, 0xc2, 0xa7, 0x2c, 0x3e, 0xcf, 0x2a, 0x69, 0x61, 0xb5, 0x7a, 0x0d, 0x3e, 0x7d, 0x12,
	0xbc, 0xbe, 0x06, 0x9f, 0xb1, 0x26, 0xfb, 0xd6, 0xd7, 0xe1, 0xb3, 0x16, 0x07, 0x56, 0xbe, 0x21,
	0xa3, 0xab, 0xae, 0xee, 0xe8, 0x21, 0x2a, 0xf8, 0x1c, 0xf9, 0xd3, 0xf7, 0x55, 0x57, 0x87, 0x37,
	0x64, 0x04, 0x9f, 0x27, 0xe9, 0x86, 0x8c, 0xda, 0x6e, 0x18, 0x26, 0x56, 0x5f, 0xb0, 0xf8, 0x69,
	0x56, 0xa5, 0x6f, 0x23, 0x22, 0xd9, 0x7d, 0x31, 0x89, 0x7c, 0xec, 0x7a, 0x5e, 0x08, 0x5f, 0xa2,
	0xc8, 0x5b, 0x6e, 0x38, 0x70, 0x03, 0xcf, 0xf5, 0x31, 0x84, 0x2f, 0x27, 0x55, 0x99, 0xd6, 0xd5,
	0x1a, 0x6b, 0xf0, 0x15, 0x8b, 0x33, 0x96, 0xa3, 0xf6, 0xc1, 0x57, 0x2d, 0xce, 0xd9, 0x6c, 0x1b,
	0xd5, 0x60, 0x28, 0x7c, 0xdd, 0x39, 0x3c, 0x44, 0x05, 0x5f, 0xb3, 0xf8, 0x19, 0x36, 0x37, 0xd1,
	0x2e, 0x47, 0x71, 0xdf, 0x9c, 0xce, 0xd7, 0xc9, 0xf2, 0xa4, 0xa1, 0xb5, 0x46, 0x03, 0xbe, 0x41,
	0x81, 0x93, 0x8e, 0x37, 0x36, 0xe1, 0x9b, 0x66, 0x68, 0x4a, 0x69, 0x05, 0xf0, 0x2d, 0xca, 0x64,
	0x2a, 0x57, 0xf8, 0xb6, 0xc5, 0x8b, 0x2c, 0x7b, 0x7d, 0x28, 0xe1, 0x3b, 0x49, 0xfd, 0xe8, 0x79,
	0xdb, 0x52, 0x5d, 0x45, 0x2f, 0x80, 0xef, 0x52, 0xb0, 0x5d, 0xe9, 0xb7, 0xd1, 0x43, 0x84, 0xef,
	0x51, 0xef, 0xae, 0x4b, 0xe5, 0x77, 0x0e, 0x0f, 0xe1, 0xfb, 0xd4, 0xfa, 0xb6, 0xf4, 0x31, 0xee,
	0x07, 0x9e, 0xab, 0xe1, 0x07, 0xd4, 0x9a, 0x1d, 0x29, 0xf5, 0x78, 0x26, 0x43, 0xf8, 0x21, 0x05,
	0xd8, 0x72, 0x07, 0xd8, 0x93, 0x9e, 0x07, 0x3f, 0x3a, 0xd9, 0xbd, 0x1f, 0xa0, 0xe9, 0xcc, 0x8f,
	0xc9, 0x87, 0xc0, 0x4c, 0x75, 0xa4, 0x10, 0x7e, 0x62, 0xe6, 0x75, 0xa6, 0x39, 0x14, 0x1a, 0x7e,
	0x4a, 0xee, 0xe3, 0x1f, 0xdb, 0x55, 0xf8, 0xd9, 0x34, 0xd6, 0xe0, 0xe7, 0xd3, 0xb8, 0x06, 0xbf,
	0x98, 0xc6, 0x75, 0xf8, 0xe5, 0x34, 0x6e, 0xc0, 0xaf, 0xa6, 0xb1, 0x0e, 0xbf, 0x9e, 0xc6, 0x06,
	0xfc, 0x66, 0x1a, 0x37, 0xe1, 0xb7, 0xd3, 0x78, 0x11, 0x7e, 0x47, 0x4d, 0x9c, 0xa4, 0xb1, 0x02,
	0xbf, 0x4f, 0x58, 0xb9, 0x3a, 0xe9, 0xcb, 0x1f, 0xa8, 0x13, 0x54, 0x84, 0x11, 0x43, 0xf8, 0x23,
	0x09, 0x7b, 0x52, 0x6e, 0x0b, 0x75, 0xe9, 0xb6, 0x88, 0xe1, 0x4f, 0x24, 0xec, 0x76, 0x9b, 0x3d,
	0x31, 0x0a, 0xc4, 0x11, 0xc2, 0x9f, 0x29, 0xc4, 0x6e, 0xb7, 0xb9, 0xed, 0x45, 0x4a, 0xc5, 0xf0,
	0x97, 0x09, 0xb7, 0x7c, 0x65, 0xd6, 0xff, 0x4a, 0xad, 0xee, 0x8b, 0xb8, 0x35, 0x18, 0x4a, 0xf8,
	0x1b, 0xe5, 0x63, 0x86, 0x96, 0xf0, 0xef, 0x64, 0x4c, 0x57, 0x82, 0xf8, 0x5e, 0xc2, 0x66, 0x98,
	0x88, 0xff, 0x41, 0xce, 0x9d, 0x4e, 0x93, 0xe8, 0x9f, 0xe4, 0x3c, 0xb9, 0x22, 0xf0, 0x2f, 0x32,
	0xa6, 0x0b, 0xd4, 0x6a, 0x0e, 0x25, 0xfc, 0x9b, 0x98, 0x06, 0x86, 0xcc, 0xff, 0x33, 0x29, 0x56,
	0xaf, 0x12, 0xff, 0x37, 0xe5, 0x1a, 0xf1, 0xff, 0x52, 0x5e, 0x23, 0xfe, 0x7f, 0xca, 0xeb, 0xc4,
	0x0f, 0xa5, 0xbc, 0x41, 0xfc, 0x70, 0xca, 0x75, 0xe2, 0x47, 0x52, 0x6e, 0x10, 0x3f, 0x9a, 0xf2,
	0x26, 0xf1, 0x63, 0x29, 0x5f, 0x24, 0x7e, 0x9c, 0x5a, 0x47, 0xf9, 0xac, 0x90, 0xf0, 0x04, 0x19,
	0x6c, 0xc9, 0xbd, 0x2d, 0x31, 0x32, 0xad, 0x7a, 0x92, 0xea, 0xbb, 0xa6, 0x71, 0xb4, 0xe3, 0xfa,
	0xc7, 0xf0, 0x14, 0x15, 0x6f, 0x9e, 0x27, 0x73, 0x99, 0x9e, 0xa6, 0x8b, 0xd5, 0x8e, 0xbb, 0xa8,
	0xe1, 0x19, 0x8b, 0x17, 0x98, 0xb5, 0xd5, 0x87, 0x67, 0x29, 0xe4, 0x0e, 0x0a, 0x07, 0x15, 0x3d,
	0x44, 0xcf, 0x51, 0xc8, 0x2e, 0xea, 0xf1, 0x69, 0x3c, 0x4f, 0x31, 0xba, 0xa8, 0xcd, 0x71, 0xc2,
	0x0b, 0x34, 0xb5, 0xdb, 0x72, 0x10, 0x85, 0xad, 0xc3, 0x43, 0x1c, 0x68, 0x78, 0x91, 0x02, 0xb4,
	0x3e, 0x16, 0xa0, 0x72, 0xd1, 0x1f, 0x20, 0xbc, 0x94, 0xdc, 0xf6, 0x38, 0xd4, 0x38, 0x82, 0x97,
	0x29, 0xa1, 0x2e, 0x6a, 0x9a, 0x08, 0x78, 0x85, 0xdc, 0xbb, 0xa8, 0x7b, 0xe3, 0x5f, 0x02, 0x78,
	0x95, 0xdc, 0x4d, 0xc6, 0xfd, 0x00, 0x71, 0x30, 0x84, 0xd7, 0xe8, 0x22, 0xf7, 0xb5, 0x72, 0x8f,
	0x71, 0x6f, 0xa8, 0x64, 0x74, 0x34, 0x84, 0xd7, 0xe9, 0x1a, 0xf4, 0x75, 0xe4, 0xc3, 0x1b, 0xd6,
	0xf2, 0x9d, 0x0c, 0x63, 0x53, 0x7f, 0x57, 0x0a, 0x2c, 0xbb, 0xdb, 0x6d, 0xc2, 0x29, 0xf3, 0x2a,
	0x37, 0x3d, 0x17, 0x7d, 0xf3, 0x7b, 0x51, 0x60, 0xd9, 0xb6, 0x3c, 0x00, 0xb3, 0x7b, 0xc9, 0x3c,
	0x15, 0xe8, 0x0b, 0x15, 0x43, 0x96, 0x6c, 0xa4, 0x0a, 0x42, 0x84, 0x19, 0xf3, 0x72, 0x6f, 0x49,
	0xa9, 0x20, 0x67, 0xd4, 0xce, 0xc1, 0x47, 0x4d, 0x35, 0xc9, 0x73, 0xaf, 0x44, 0x00, 0x05, 0xa3,
	0x5e, 0x46, 0x31, 0x90, 0x3e, 0x94, 0x4c, 0x98, 0x96, 0x3f, 0x90, 0x91, 0xf9, 0xfd, 0x01, 0x76,
	0x90, 0xa7, 0x7f, 0xc1, 0x6b, 0x6f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x63, 0x67, 0x59, 0xd9, 0x1c,
	0x0b, 0x00, 0x00,
}
